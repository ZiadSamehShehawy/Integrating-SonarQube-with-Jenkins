pipeline {
    agent any
    tools {
        maven 'jenkins-maven'
    }

    stages {
        stage('checkout the code') {
            steps {
                git url: 'https://github.com/ZiadSamehShehawy/Integrating-SonarQube-with-Jenkins.git', branch: 'master'
            }
        }
        stage('Build The Code') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Sonarqube Test') {
            steps {
                withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 20, unit: 'SECONDS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy') {
            steps {
                sh 'java -jar target/my-app-1.0-SNAPSHOT.jar'
            }
        }
    }
    post {
        notBuilt {
            slackSend channel: '#jenkins-ci', message: "Build notBuilt - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", teamDomain: 'raya-dc', tokenCredentialId: 'slack'
        }
        cleanup {
            slackSend channel: '#jenkins-ci', message: "Build cleanup - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", teamDomain: 'raya-dc', tokenCredentialId: 'slack'
        }
        success {
            slackSend channel: '#jenkins-ci', color: '#439FE0', message: "Build success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", teamDomain: 'raya-dc', tokenCredentialId: 'slack'
        }
        failure {
            slackSend channel: '#jenkins-ci', message: "Build failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", teamDomain: 'raya-dc', tokenCredentialId: 'slack'
        }
    }
}
